<resources>
    <string name="app_name">ExamplesForAndroid</string>

    <!--操作符-->
    <string name="rx_create">create</string>
    <string name="rx_create_desc">可用于获取一个被观察的对象</string>
    <string name="rx_just">just</string>
    <string name="rx_just_desc">just操作符，和RxJava 1.x 没有什么区别，就是接受一个可变参数，依次发送</string>
    <string name="rx_map">map</string>
    <string name="rx_map_desc">基本是RxJava 最简单的操作符了作用是对上游发送的每一个事件应用一个函数，使得每一个事件都按照指定的函数去变化</string>
    <string name="rx_zip">zip</string>
    <string name="rx_zip_desc">合并事件专用,分别从两个上游事件中各取出一个组合,一个事件只能被使用一次，顺序严格按照事件发送的顺序,最终下游事件收到的是和上游事件最少的数目相同（必须两两配对，多余的舍弃)</string>
    <string name="rx_flatMap">flatMap</string>
    <string name="rx_flatMap_desc">FlatMap将一个发送事件的上游Observable变换成多个发送事件的Observables， 然后将它们发射的时间合并后放进一个单独的Observable里</string>
    <string name="rx_concatMap">concatMap</string>
    <string name="rx_concatMap_desc">concatMap作用和flatMap几乎一模一样，唯一的区别是它能保证事件的顺序</string>
    <string name="rx_filter">filter</string>
    <string name="rx_filter_desc">过滤操作符，取正确的值</string>
    <string name="rx_take">take</string>
    <string name="rx_take_desc">用于指定订阅者最多收到多少数据</string>
    <string name="rx_doOnNext">doOnNext</string>
    <string name="rx_doOnNext_desc">让订阅者在接收到数据前干点事情的操作符</string>
    <string name="rx_timer">timer</string>
    <string name="rx_timer_desc">在Rxjava中timer 操作符既可以延迟执行一段逻辑，也可以间隔执行一段逻辑,但在RxJava 2.x已经过时了，现在用interval操作符来间隔执行，timer和interval都默认执行在一个新线程上</string>
    <string name="rx_interval">interval</string>
    <string name="rx_interval_desc">间隔执行操作，默认在新线程</string>
    <string name="rx_skip">skip</string>
    <string name="rx_skip_desc">接受一个long型参数，代表跳过多少个数目的事件再开始接收</string>
    <string name="rx_concat">concat</string>
    <string name="rx_concat_desc">连接操作符，可接受Observable的可变参数，或者Observable的集合</string>
    <string name="rx_distinct">distinct</string>
    <string name="rx_distinct_desc">去重操作符，其实就是简单的去重</string>
    <string name="rx_buffer">buffer</string>
    <string name="rx_buffer_desc">buffer(count, skip)` 从定义就差不多能看出作用了，将 observable 中的数据按 skip（步长）分成最长不超过 count 的 buffer，然后生成一个 observable</string>
    <string name="rx_debounce">debounce</string>
    <string name="rx_debounce_desc">过滤掉发射速率过快的数据项</string>
    <string name="rx_defer">defer</string>
    <string name="rx_defer_desc">在每次订阅的时候就会创建一个新的 Observable</string>
    <string name="rx_last">last</string>
    <string name="rx_last_desc">取出最后一个值，参数是没有值的时候的默认值</string>
    <string name="rx_merge">merge</string>
    <string name="rx_merge_desc">将多个Observable合起来，接受可变参数，也支持使用迭代器集合.支持发射器同时发射数据</string>
    <string name="rx_reduce">reduce</string>
    <string name="rx_reduce_desc">把一个被观察者中的多个事件进行压缩，最后发射压缩后的事件。聚合或压缩。</string>
    <string name="rx_scan">scan</string>
    <string name="rx_scan_desc">和上面的reduce差不多，区别在于reduce()只输出结果，而scan()会将过程中每一个结果输出</string>
    <string name="rx_window">window</string>
    <string name="rx_window_desc">按照时间划分窗口，将数据发送给不同的Observable</string>
    <string name="rx_PublishSubject">PublishSubject</string>
    <string name="rx_PublishSubject_desc">onNext() 会通知每个观察者。一旦订阅了，将所有随后观察到的项发送给订阅方。</string>
    <string name="rx_AsyncSubject">AsyncSubject</string>
    <string name="rx_AsyncSubject_desc">在调用 onComplete() 之前，除了 subscribe() 其它的操作都会被缓存，在调用 onComplete() 之后只有最后一个 onNext() 会生效</string>
    <string name="rx_BehaviorSubject">BehaviorSubject</string>
    <string name="rx_BehaviorSubject_desc">发射Observable最近的数据，如果Observable还没有开始发射数据，则发射BehaviorSubject的默认数据</string>
    <string name="rx_single">Single</string>
    <string name="rx_single_desc">Single只会接收一个参数,而SingleObserver只会调用onError或者onSuccess.只发射一条单一的数据，或者一条异常通知。</string>
    <string name="rx_Completable">Completable</string>
    <string name="rx_Completable_desc">只关心结果，也就是说 Completable 是没有 onNext 的，要么成功要么出错，不关心过程，在 subscribe 后的某个时间点返回结果</string>
    <string name="rx_MayBe">Maybe</string>
    <string name="rx_MayBe_desc">可发射一条单一的数据，以及发射一条完成通知，或者一条异常通知，其中完成通知和异常通知只能发射一个，发射数据只能在发射完成通知或者异常通知之前，否则发射数据无效</string>
    <string name="rx_Flowable">Flowable</string>
    <string name="rx_Flowable_desc">专用于解决背压问题</string>

    <!--应用实例-->
    <string name="example_1_download">后台下载文件，前台实时显示进度</string>
    <string name="example_2_buffer">计算一段时间内数据的平均值</string>
    <string name="example_3_search">优化搜索联想功能</string>
    <string name="example_4_polling">轮询操作</string>
    <string name="example_5_exception_retry">基于错误类型的重试请求</string>
    <string name="example_6_validate">多个输入的验证</string>
    <string name="example_7_cache">优先加载本地缓存，同时发起网络请求</string>
</resources>
